#  01-TWO SUM
1. 自写JAVA代码
#  思路：对复制的数组进行排序，构建左坐标和右坐标，左坐标为0，右坐标为长度-1。
开始循环查找，左坐标对应值+右坐标对应值小于目标，则左加一，大于目标则右加一，相等或没找到则跳出循环。再将复制的数组坐标还原到原数组中。
#  使用的JAVA内置函数：
   Arrays.copyOf() 进行（多种类型）数组的复制；Arrays.sort() 排序，默认从小到大。
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] n = Arrays.copyOf(nums,nums.length);        
        int i,lef,rig;
        int[] re = new int[2];
        lef = 0;
        rig = nums.length - 1;
        Arrays.sort(n);
        for (i = 0 ;i < nums.length; i++)   #  循环查找，左坐标对应值+右坐标对应值小于目标，则左加一，大于目标则右加一
        {
            if(n[lef] + n[rig] < target)
                lef++;
            else if(n[lef] + n[rig] > target)
                rig--;
            else
                break;
        }
        for (i = 0 ;i < nums.length; i++)  #  还原对应左坐标
        {
            if(n[lef] == nums[i])
            {   
                lef = i;
                break;
            }
        }
        for (i = nums.length - 1 ;i >= 0 ; i--)  #  还原对应右坐标
        {
            if(n[rig] == nums[i])
            {
                rig = i;
                break;
            }
        }
        re[0] = lef;
        re[1] = rig;
        return re;
    }
}

2.其他解法：
#  采用哈希表：Hashmap：key-value.Keys and values in a HashMap are actually objects. A String in Java is an object (not a primitive type)
public int[] twoSum(int[] numbers, int target) {
    int[] result = new int[2];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < numbers.length; i++) {
        if (map.containsKey(target - numbers[i])) #  查找map中是否存在目标减去当前值的键值，若存在则返回，若不存在则往表中放入该值
        {
            result[1] = i;
            result[0] = map.get(target - numbers[i]);
            return result;
        }
        map.put(numbers[i], i);
    }
    return result;
}

